name: Deployment

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  IMAGE_NAME: ci-build

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ['x86_64']
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: false
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/setup-java@v1
        with:
          java-version: '17'
          java-package: jdk
          architecture: x64

      - name: Install Gradle 7.5.1
        run: wget https://downloads.gradle-dn.com/distributions/gradle-7.5.1-bin.zip && unzip gradle-7.5.1-bin.zip

      - name: Run checkstyle
        run: ./gradle-7.5.1/bin/gradle checkstyleMain

      - name: Run Gradle
        run: ./gradle-7.5.1/bin/gradle build

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker buildx build --platform linux/amd64,linux/arm64 -t $IMAGE_ID:$VERSION . --push


  deploy:
      runs-on: ubuntu-latest
      needs: build
      if: github.event_name == 'push'
      steps:
        - name: Setup kubectl
          uses: tale/kubectl-action@v1
          with:
            base64-kube-config: ${{ secrets.KUBECONFIG }}
            kubectl-version: v1.23.0

        - name: Deploy to Kubernetes
          run: kubectl rollout restart deployment spodlivoibot -n spodlivoi
