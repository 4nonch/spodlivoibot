package spodlivoi.roll;

import lombok.extern.slf4j.Slf4j;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Component;
import spodlivoi.database.entity.Anus;
import spodlivoi.database.repository.AnusRepository;
import spodlivoi.message.Messages;
import spodlivoi.service.TelegramService;
import spodlivoi.utils.Randomizer;

@Component
@Slf4j
public class AnusRoller extends RollerBase<Anus> {

    private final Messages messages;

    public AnusRoller(AnusRepository repository, Messages messages, TelegramService telegramService) {
        super((JpaRepository) repository, telegramService);
        this.messages = messages;
    }

    @Override
    String getRollMessage(boolean first, int size, int upSize) {
        if (first) {
            if (size == 0) {
                return "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–≤–æ—è –∞–Ω–∞–ª—å–Ω–∞—è –¥–µ–≤—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ç–µ–±–µ!";
            } else {
                return "–ê—Ö—É–µ—Ç—å! –®–∏—Ä–∏–Ω–∞ —Ç–≤–æ–µ–≥–æ –∞–Ω—É—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∂ " + size +
                        "—Å–º!\n–ñ–¥—É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä!";
            }
        } else {
            if (size == 0) {
                return "–ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π —Ä–∞–∑–¥—Ä–æ—á–µ–Ω—ã–π –≤ —Ö–ª–∞–º –∞–Ω—É—Å –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –∑–∞—à–∏–ª–∏ üéâüéâüéâ";
            }

            if (upSize < 0) {
                int messageNumber = Randomizer.getRandomNumberInRange(0, 3);
                switch (messageNumber) {
                    case 0:
                        return "–ü—Ä–æ—Ä—ã–≤ –≤ –º–µ–¥–∏—Ü–∏–Ω–µ! –¢–≤–æ–π –∞–Ω—É—Å –ø–æ–¥—à–∏–ª–∏ –∏ –æ–Ω —Å–æ–∫—Ä–∞—Ç–∏–ª—Å—è –∞–∂ –Ω–∞ " +
                                Math.abs(upSize) +
                                "—Å–º.\n–¢–µ–ø–µ—Ä—å –µ–≥–æ —à–∏—Ä–∏–Ω–∞ –≤—Å–µ–≥–æ –ª–∏—à—å " + size + "—Å–º." +
                                "\n–ñ–¥—É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä!";
                    case 1:
                        return "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ –¥–∞—ë—Ç –æ —Å–µ–±–µ –∑–Ω–∞—Ç—å, –∏ —Ä–∞–Ω—ã –±—ã–ª–æ–π –ª—é–±–≤–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –∑–∞—Ç—è–≥–∏–≤–∞—Ç—å—Å—è.\n" +
                                "–¢–≤–æ–µ –æ—á–∫–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –Ω–∞ " + Math.abs(upSize) + 
                                "—Å–º –∏ —Ç–µ–ø–µ—Ä—å –µ–≥–æ —à–∏—Ä–∏–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç " + size +
                                "—Å–º.\n" +
                                "–í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–≤—Ç—Ä–∞ —Ç–µ–±–µ –ø–æ–≤–µ–∑–µ—Ç –±–æ–ª—å—à–µ?";
                    case 2:
                        return "*–ë–£ –ë–õ–Ø–¢–¨!* –°—Ç—Ä–∞—à–Ω–æ? –ù–µ—Ç? –ê —è –≤–∏–∂—É –∫–∞–∫ —Ç–≤–æ–µ –æ—á–∫–æ —Å–∂–∞–ª–æ—Å—å –Ω–∞ " + Math.abs(upSize) +
                                "—Å–º!\n" +
                                "–¢–µ–ø–µ—Ä—å –µ–≥–æ —à–∏—Ä–∏–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç " + size + "—Å–º. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞, —à—É–≥–∞–Ω—ã–π!";
                    case 3:
                        return "–¢—ã –¥–æ–ª–≥–æ —Å–∏–¥–µ–ª –Ω–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –ø–ª–∏—Ç–µ, –æ—Ç —á–µ–≥–æ —Ç–≤–æ–π –∞–Ω—É—Å —Å–∂–∞–ª—Å—è –Ω–∞ " + Math.abs(upSize) +
                                "—Å–º.\n" +
                                "–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª –≥–µ–º–æ—Ä—Ä–æ–π –∏ —Ç–µ–ø–µ—Ä—å —à–∏—Ä–∏–Ω–∞ —Ç–≤–æ–µ–≥–æ –∞–Ω—É—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç " + size + "—Å–º.\n" +
                                "–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ø—Ä–æ—Å–∏ –º–∞–º–∫—É –∫—É–ø–∏—Ç—å —Ç–µ–±–µ —Ç–µ–ø–ª—ã–µ –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏!";
                }
            } else {
                int messageNumber = Randomizer.getRandomNumberInRange(0, 5);
                String item = messages.getRandomAnusItem();
                switch (messageNumber) {
                    case 0:
                        return "–¢–≤–æ–π *‚ôÇDungeon Master‚ôÇ* –≤—Å—Ç–∞–≤–∏–ª *‚ôÇfinger in your anal‚ôÇ* –æ—Ç —á–µ–≥–æ –æ—á–∫–æ —Ä–∞—Å—à–∏—Ä–∏–ª–æ—Å—å –Ω–∞ " +
                                "—Ü–µ–ª—ã—Ö " + Math.abs(upSize) + "—Å–º. \n" +
                                "–¢–µ–ø–µ—Ä—å –µ–≥–æ —à–∏—Ä–∏–Ω–∞ –∞–∂ " + size + "—Å–º! –°–∫–æ—Ä–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –Ω–∞—Å—Ç–æ—è—â–∏–º *‚ôÇfucking slave‚ôÇ*!";
                    case 1:
                        return "–ü–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ *‚ôÇANAL FISTING‚ôÇ*, —É —Ç–µ–±—è –≤—ã–ø–∞–ª–∞ –∫–∏—à–∫–∞ –Ω–∞ " + Math.abs(upSize) + "—Å–º.\n" +
                                "–¢–µ–ø–µ—Ä—å –µ–≥–æ —à–∏—Ä–∏–Ω–∞ –∞–∂ " + size + " —Å–º! –ù–µ –∑–∞–±—ã–≤–∞–π *‚ôÇJUST LUBE IT UP‚ôÇ*.";
                    case 2:
                        return "–¢—ã –ø–æ–¥—Å–∫–æ–ª—å–∑–Ω—É–ª—Å—è –≤ –≤–∞–Ω–Ω–æ–π –∏ —Å–ª—É—á–∞–π–Ω–æ —É–ø–∞–ª –Ω–∞ " + item +
                                " —Ä–∞–∑–º–µ—Ä–æ–º " + Math.abs(upSize) + "—Å–º.\n–¢–µ–ø–µ—Ä—å —à–∏—Ä–∏–Ω–∞ —Ç–≤–æ–µ–≥–æ –∞–Ω—É—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç "
                                + size + "—Å–º!\n" +
                                "–ù–µ –∑–∞–±—ã–≤–∞–π –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–∏–≥–∏–µ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞!";
                    case 3:
                        return "–¢–µ–±—è –ø—Ä–∏–Ω—è–ª–∏ –º—É—Å–æ—Ä–∞ –∏ –ø–æ—Å–∞–¥–∏–ª–∏ –Ω–∞ " + item +
                                " —Ä–∞–∑–º–µ—Ä–æ–º " + Math.abs(upSize) + "—Å–º.\n–¢–µ–ø–µ—Ä—å —à–∏—Ä–∏–Ω–∞ —Ç–≤–æ–µ–≥–æ –∞–Ω—É—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç "
                                + size + "—Å–º.\n" +
                                "–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥–µ—à—å –¥—É–º–∞—Ç—å –±–∞—à–∫–æ–π –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–∏–∑–¥–∏—Ç—å —à–æ–∫–æ–ª–∞–¥–Ω—ã–µ —Å—ã—Ä–∫–∏ –∏–∑ –∞—à–∞–Ω–∞!";
                    case 4:
                        return "–ó—Ä—è —Ç—ã —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —ç—Ç–æ—Ç –∫–∞—Å—Ç–∏–Ω–≥...\n–í —Ç–µ–±—è –≤—Å—Ç–∞–≤–∏–ª–∏ " + item +
                                " —Ä–∞–∑–º–µ—Ä–æ–º " + Math.abs(upSize) + "—Å–º.\n–¢–µ–ø–µ—Ä—å —à–∏—Ä–∏–Ω–∞ —Ç–≤–æ–µ–≥–æ –∞–Ω—É—Å–∞ " + size + "—Å–º.\n" +
                                "–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–π—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É!";
                    case 5:
                        return "*–ß–£–î–û–í–ò–©–ù–´–ô –†–ê–ó–†–´–í –ê–ù–£–°–ê!* –°–µ–≥–æ–¥–Ω—è –æ–Ω —Å—Ç–∞–ª —à–∏—Ä–µ –∞–∂ –Ω–∞ " + Math.abs(upSize) + "—Å–º!\n" +
                                "–ê –ø—Ä–∏—á–∏–Ω–æ–π –≤—Å–µ–º—É - —Å—Ç—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏–π –Ω–∞ " + item +
                                "\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ –æ–Ω —Ç–∞–º –æ–∫–∞–∑–∞–ª—Å—è? –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ç–µ–ø–µ—Ä—å —à–∏—Ä–∏–Ω–∞ —Ç–≤–æ–µ–≥–æ –∞–Ω—É—Å–∞ —Ç–µ–ø–µ—Ä—å " +
                                "—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç " + size + "—Å–º.";
                }
            }
        }
        return "–ü–∏–∑–¥–µ—Ü...";
    }

    @Override
    int getPlusSize() {
        int lucky = Randomizer.getRandomNumberInRange(0, 100);
        if (lucky == 0) {
            return 0;
        } else if (lucky < 6) {
            return Randomizer.getRandomNumberInRange(-7, -5);
        } else if (lucky < 21) {
            return Randomizer.getRandomNumberInRange(-5, -3);
        } else if (lucky < 31) {
            return Randomizer.getRandomNumberInRange(-3, -1);
        } else if (lucky < 41) {
            return Randomizer.getRandomNumberInRange(5, 10);
        } else if (lucky < 61) {
            return Randomizer.getRandomNumberInRange(2, 5);
        } else {
            return Randomizer.getRandomNumberInRange(1, 2);
        }
    }

    @Override
    String getName() {
        return "–∞–Ω—É—Å";
    }

    @Override
    String getNames() {
        return "–∞–Ω—É—Å–æ–≤";
    }

    @Override
    String getWaitText() {
        return "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–ª–∏—Ç—å —Å–æ —Å–≤–æ–∏–º –∞–Ω—É—Å–æ–º!";
    }

}
